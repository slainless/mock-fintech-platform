//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SharedAccountAccess = newSharedAccountAccessTable("public", "shared_account_access", "")

type sharedAccountAccessTable struct {
	postgres.Table

	// Columns
	AccountUUID postgres.ColumnString
	UserUUID    postgres.ColumnString
	Permission  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SharedAccountAccessTable struct {
	sharedAccountAccessTable

	EXCLUDED sharedAccountAccessTable
}

// AS creates new SharedAccountAccessTable with assigned alias
func (a SharedAccountAccessTable) AS(alias string) *SharedAccountAccessTable {
	return newSharedAccountAccessTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SharedAccountAccessTable with assigned schema name
func (a SharedAccountAccessTable) FromSchema(schemaName string) *SharedAccountAccessTable {
	return newSharedAccountAccessTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SharedAccountAccessTable with assigned table prefix
func (a SharedAccountAccessTable) WithPrefix(prefix string) *SharedAccountAccessTable {
	return newSharedAccountAccessTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SharedAccountAccessTable with assigned table suffix
func (a SharedAccountAccessTable) WithSuffix(suffix string) *SharedAccountAccessTable {
	return newSharedAccountAccessTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSharedAccountAccessTable(schemaName, tableName, alias string) *SharedAccountAccessTable {
	return &SharedAccountAccessTable{
		sharedAccountAccessTable: newSharedAccountAccessTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newSharedAccountAccessTableImpl("", "excluded", ""),
	}
}

func newSharedAccountAccessTableImpl(schemaName, tableName, alias string) sharedAccountAccessTable {
	var (
		AccountUUIDColumn = postgres.StringColumn("account_uuid")
		UserUUIDColumn    = postgres.StringColumn("user_uuid")
		PermissionColumn  = postgres.IntegerColumn("permission")
		allColumns        = postgres.ColumnList{AccountUUIDColumn, UserUUIDColumn, PermissionColumn}
		mutableColumns    = postgres.ColumnList{PermissionColumn}
	)

	return sharedAccountAccessTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AccountUUID: AccountUUIDColumn,
		UserUUID:    UserUUIDColumn,
		Permission:  PermissionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
