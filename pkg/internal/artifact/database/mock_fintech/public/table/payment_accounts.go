//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PaymentAccounts = newPaymentAccountsTable("public", "payment_accounts", "")

type paymentAccountsTable struct {
	postgres.Table

	// Columns
	UUID      postgres.ColumnString
	UserUUID  postgres.ColumnString
	ServiceID postgres.ColumnString
	Name      postgres.ColumnString
	ForeignID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PaymentAccountsTable struct {
	paymentAccountsTable

	EXCLUDED paymentAccountsTable
}

// AS creates new PaymentAccountsTable with assigned alias
func (a PaymentAccountsTable) AS(alias string) *PaymentAccountsTable {
	return newPaymentAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentAccountsTable with assigned schema name
func (a PaymentAccountsTable) FromSchema(schemaName string) *PaymentAccountsTable {
	return newPaymentAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentAccountsTable with assigned table prefix
func (a PaymentAccountsTable) WithPrefix(prefix string) *PaymentAccountsTable {
	return newPaymentAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentAccountsTable with assigned table suffix
func (a PaymentAccountsTable) WithSuffix(suffix string) *PaymentAccountsTable {
	return newPaymentAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentAccountsTable(schemaName, tableName, alias string) *PaymentAccountsTable {
	return &PaymentAccountsTable{
		paymentAccountsTable: newPaymentAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newPaymentAccountsTableImpl("", "excluded", ""),
	}
}

func newPaymentAccountsTableImpl(schemaName, tableName, alias string) paymentAccountsTable {
	var (
		UUIDColumn      = postgres.StringColumn("uuid")
		UserUUIDColumn  = postgres.StringColumn("user_uuid")
		ServiceIDColumn = postgres.StringColumn("service_id")
		NameColumn      = postgres.StringColumn("name")
		ForeignIDColumn = postgres.StringColumn("foreign_id")
		allColumns      = postgres.ColumnList{UUIDColumn, UserUUIDColumn, ServiceIDColumn, NameColumn, ForeignIDColumn}
		mutableColumns  = postgres.ColumnList{UserUUIDColumn, ServiceIDColumn, NameColumn, ForeignIDColumn}
	)

	return paymentAccountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID:      UUIDColumn,
		UserUUID:  UserUUIDColumn,
		ServiceID: ServiceIDColumn,
		Name:      NameColumn,
		ForeignID: ForeignIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
