//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SharedOwnership = newSharedOwnershipTable("public", "shared_ownership", "")

type sharedOwnershipTable struct {
	postgres.Table

	// Columns
	AccountUUID postgres.ColumnString
	UserUUID    postgres.ColumnString
	Status      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SharedOwnershipTable struct {
	sharedOwnershipTable

	EXCLUDED sharedOwnershipTable
}

// AS creates new SharedOwnershipTable with assigned alias
func (a SharedOwnershipTable) AS(alias string) *SharedOwnershipTable {
	return newSharedOwnershipTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SharedOwnershipTable with assigned schema name
func (a SharedOwnershipTable) FromSchema(schemaName string) *SharedOwnershipTable {
	return newSharedOwnershipTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SharedOwnershipTable with assigned table prefix
func (a SharedOwnershipTable) WithPrefix(prefix string) *SharedOwnershipTable {
	return newSharedOwnershipTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SharedOwnershipTable with assigned table suffix
func (a SharedOwnershipTable) WithSuffix(suffix string) *SharedOwnershipTable {
	return newSharedOwnershipTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSharedOwnershipTable(schemaName, tableName, alias string) *SharedOwnershipTable {
	return &SharedOwnershipTable{
		sharedOwnershipTable: newSharedOwnershipTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSharedOwnershipTableImpl("", "excluded", ""),
	}
}

func newSharedOwnershipTableImpl(schemaName, tableName, alias string) sharedOwnershipTable {
	var (
		AccountUUIDColumn = postgres.StringColumn("account_uuid")
		UserUUIDColumn    = postgres.StringColumn("user_uuid")
		StatusColumn      = postgres.IntegerColumn("status")
		allColumns        = postgres.ColumnList{AccountUUIDColumn, UserUUIDColumn, StatusColumn}
		mutableColumns    = postgres.ColumnList{StatusColumn}
	)

	return sharedOwnershipTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AccountUUID: AccountUUIDColumn,
		UserUUID:    UserUUIDColumn,
		Status:      StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
