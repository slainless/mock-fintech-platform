//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TransactionHistories = newTransactionHistoriesTable("public", "transaction_histories", "")

type transactionHistoriesTable struct {
	postgres.Table

	// Columns
	UUID            postgres.ColumnString
	AccountUUID     postgres.ColumnString
	DestUUID        postgres.ColumnString
	Mutation        postgres.ColumnInteger
	Currency        postgres.ColumnString
	Status          postgres.ColumnInteger
	Address         postgres.ColumnString
	TransactionNote postgres.ColumnString
	TransactionDate postgres.ColumnTimestamp
	TransactionType postgres.ColumnInteger
	IssuerUUID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionHistoriesTable struct {
	transactionHistoriesTable

	EXCLUDED transactionHistoriesTable
}

// AS creates new TransactionHistoriesTable with assigned alias
func (a TransactionHistoriesTable) AS(alias string) *TransactionHistoriesTable {
	return newTransactionHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionHistoriesTable with assigned schema name
func (a TransactionHistoriesTable) FromSchema(schemaName string) *TransactionHistoriesTable {
	return newTransactionHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionHistoriesTable with assigned table prefix
func (a TransactionHistoriesTable) WithPrefix(prefix string) *TransactionHistoriesTable {
	return newTransactionHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionHistoriesTable with assigned table suffix
func (a TransactionHistoriesTable) WithSuffix(suffix string) *TransactionHistoriesTable {
	return newTransactionHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionHistoriesTable(schemaName, tableName, alias string) *TransactionHistoriesTable {
	return &TransactionHistoriesTable{
		transactionHistoriesTable: newTransactionHistoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newTransactionHistoriesTableImpl("", "excluded", ""),
	}
}

func newTransactionHistoriesTableImpl(schemaName, tableName, alias string) transactionHistoriesTable {
	var (
		UUIDColumn            = postgres.StringColumn("uuid")
		AccountUUIDColumn     = postgres.StringColumn("account_uuid")
		DestUUIDColumn        = postgres.StringColumn("dest_uuid")
		MutationColumn        = postgres.IntegerColumn("mutation")
		CurrencyColumn        = postgres.StringColumn("currency")
		StatusColumn          = postgres.IntegerColumn("status")
		AddressColumn         = postgres.StringColumn("address")
		TransactionNoteColumn = postgres.StringColumn("transaction_note")
		TransactionDateColumn = postgres.TimestampColumn("transaction_date")
		TransactionTypeColumn = postgres.IntegerColumn("transaction_type")
		IssuerUUIDColumn      = postgres.StringColumn("issuer_uuid")
		allColumns            = postgres.ColumnList{UUIDColumn, AccountUUIDColumn, DestUUIDColumn, MutationColumn, CurrencyColumn, StatusColumn, AddressColumn, TransactionNoteColumn, TransactionDateColumn, TransactionTypeColumn, IssuerUUIDColumn}
		mutableColumns        = postgres.ColumnList{AccountUUIDColumn, DestUUIDColumn, MutationColumn, CurrencyColumn, StatusColumn, AddressColumn, TransactionNoteColumn, TransactionDateColumn, TransactionTypeColumn, IssuerUUIDColumn}
	)

	return transactionHistoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UUID:            UUIDColumn,
		AccountUUID:     AccountUUIDColumn,
		DestUUID:        DestUUIDColumn,
		Mutation:        MutationColumn,
		Currency:        CurrencyColumn,
		Status:          StatusColumn,
		Address:         AddressColumn,
		TransactionNote: TransactionNoteColumn,
		TransactionDate: TransactionDateColumn,
		TransactionType: TransactionTypeColumn,
		IssuerUUID:      IssuerUUIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
