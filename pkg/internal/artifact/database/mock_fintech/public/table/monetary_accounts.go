//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MonetaryAccounts = newMonetaryAccountsTable("public", "monetary_accounts", "")

type monetaryAccountsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UUID      postgres.ColumnString
	UserUUID  postgres.ColumnString
	ServiceID postgres.ColumnString
	Balance   postgres.ColumnInteger
	Currency  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MonetaryAccountsTable struct {
	monetaryAccountsTable

	EXCLUDED monetaryAccountsTable
}

// AS creates new MonetaryAccountsTable with assigned alias
func (a MonetaryAccountsTable) AS(alias string) *MonetaryAccountsTable {
	return newMonetaryAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonetaryAccountsTable with assigned schema name
func (a MonetaryAccountsTable) FromSchema(schemaName string) *MonetaryAccountsTable {
	return newMonetaryAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonetaryAccountsTable with assigned table prefix
func (a MonetaryAccountsTable) WithPrefix(prefix string) *MonetaryAccountsTable {
	return newMonetaryAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonetaryAccountsTable with assigned table suffix
func (a MonetaryAccountsTable) WithSuffix(suffix string) *MonetaryAccountsTable {
	return newMonetaryAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonetaryAccountsTable(schemaName, tableName, alias string) *MonetaryAccountsTable {
	return &MonetaryAccountsTable{
		monetaryAccountsTable: newMonetaryAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newMonetaryAccountsTableImpl("", "excluded", ""),
	}
}

func newMonetaryAccountsTableImpl(schemaName, tableName, alias string) monetaryAccountsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UUIDColumn      = postgres.StringColumn("uuid")
		UserUUIDColumn  = postgres.StringColumn("user_uuid")
		ServiceIDColumn = postgres.StringColumn("service_id")
		BalanceColumn   = postgres.IntegerColumn("balance")
		CurrencyColumn  = postgres.StringColumn("currency")
		allColumns      = postgres.ColumnList{IDColumn, UUIDColumn, UserUUIDColumn, ServiceIDColumn, BalanceColumn, CurrencyColumn}
		mutableColumns  = postgres.ColumnList{IDColumn, UUIDColumn, UserUUIDColumn, ServiceIDColumn, BalanceColumn, CurrencyColumn}
	)

	return monetaryAccountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UUID:      UUIDColumn,
		UserUUID:  UserUUIDColumn,
		ServiceID: ServiceIDColumn,
		Balance:   BalanceColumn,
		Currency:  CurrencyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
