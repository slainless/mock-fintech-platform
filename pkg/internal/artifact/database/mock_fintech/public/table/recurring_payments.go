//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RecurringPayments = newRecurringPaymentsTable("public", "recurring_payments", "")

type recurringPaymentsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	UUID           postgres.ColumnString
	ServiceID      postgres.ColumnString
	AccountUUID    postgres.ColumnString
	SchedulerType  postgres.ColumnInteger
	LastCharge     postgres.ColumnTimestamp
	ForeignID      postgres.ColumnString
	ChargingMethod postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RecurringPaymentsTable struct {
	recurringPaymentsTable

	EXCLUDED recurringPaymentsTable
}

// AS creates new RecurringPaymentsTable with assigned alias
func (a RecurringPaymentsTable) AS(alias string) *RecurringPaymentsTable {
	return newRecurringPaymentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RecurringPaymentsTable with assigned schema name
func (a RecurringPaymentsTable) FromSchema(schemaName string) *RecurringPaymentsTable {
	return newRecurringPaymentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RecurringPaymentsTable with assigned table prefix
func (a RecurringPaymentsTable) WithPrefix(prefix string) *RecurringPaymentsTable {
	return newRecurringPaymentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RecurringPaymentsTable with assigned table suffix
func (a RecurringPaymentsTable) WithSuffix(suffix string) *RecurringPaymentsTable {
	return newRecurringPaymentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRecurringPaymentsTable(schemaName, tableName, alias string) *RecurringPaymentsTable {
	return &RecurringPaymentsTable{
		recurringPaymentsTable: newRecurringPaymentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newRecurringPaymentsTableImpl("", "excluded", ""),
	}
}

func newRecurringPaymentsTableImpl(schemaName, tableName, alias string) recurringPaymentsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		UUIDColumn           = postgres.StringColumn("uuid")
		ServiceIDColumn      = postgres.StringColumn("service_id")
		AccountUUIDColumn    = postgres.StringColumn("account_uuid")
		SchedulerTypeColumn  = postgres.IntegerColumn("scheduler_type")
		LastChargeColumn     = postgres.TimestampColumn("last_charge")
		ForeignIDColumn      = postgres.StringColumn("foreign_id")
		ChargingMethodColumn = postgres.IntegerColumn("charging_method")
		allColumns           = postgres.ColumnList{IDColumn, UUIDColumn, ServiceIDColumn, AccountUUIDColumn, SchedulerTypeColumn, LastChargeColumn, ForeignIDColumn, ChargingMethodColumn}
		mutableColumns       = postgres.ColumnList{IDColumn, UUIDColumn, ServiceIDColumn, AccountUUIDColumn, SchedulerTypeColumn, LastChargeColumn, ForeignIDColumn, ChargingMethodColumn}
	)

	return recurringPaymentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UUID:           UUIDColumn,
		ServiceID:      ServiceIDColumn,
		AccountUUID:    AccountUUIDColumn,
		SchedulerType:  SchedulerTypeColumn,
		LastCharge:     LastChargeColumn,
		ForeignID:      ForeignIDColumn,
		ChargingMethod: ChargingMethodColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
